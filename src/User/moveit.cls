Include %occInclude

/// Generated by TSQL CREATE PROC SQLUser.moveit
Class User.moveit [ Abstract, DdlAllowed, GeneratedBy = %XSQL.StatementBatch.cls, Owner = {UnknownUser} ]
{

ClassMethod moveit(who As %Library.Integer(MAXVAL=2147483647,MINVAL=-2147483648), from As %Library.String(MAXLEN=2), to As %Library.String(MAXLEN=2)) As %Library.Integer [ Language = tsql, SqlName = moveit, SqlProc ]
{

begin
 set nocount on
 print case when @who = 1 then 'Me:  ' else 'You: ' end + @from + '-' + @to
 declare @bout bit, @num int, @wasking bit
 if SQLUser.isCellEmpty(@to) = 0
  return -- Not Empty
 
 --Crown King
 if @who = 1 and lower(left(@to, 1)) = 'h'
 begin
  update check_table set
  cking = cking | convert(tinyint, power(2, (8-convert(tinyint, right(@from, 1)))))
  where row = left(@from, 1)
 end
 else if @who = 2 and lower(left(@to, 1)) = 'a'
 begin
  update check_table set
  pking = pking | convert(tinyint, power(2, (8-convert(tinyint, right(@from, 1)))))
  where row = left(@from, 1)
 end

 set @wasking = SQLUser.isKing(@from)

 if @who = 1
 begin
  --Remove
  set @num = convert(tinyint, right(@from, 1))
  update check_table set
   comp = comp & ~convert(tinyint, power(2, (8-convert(tinyint, right(@from, 1))))),
   cking = case when @wasking = 1 then cking & ~convert(tinyint, power(2, (8-convert(tinyint, right(@from, 1)))))
    else 0 end
  where
   row = left(@from, 1)

  --Add
  set @num = convert(tinyint, right(@to, 1))
  update check_table set
   comp = comp | convert(tinyint, power(2, (8-convert(tinyint, right(@to, 1))))),
   cking = case when @wasking  = 1 then cking | convert(tinyint, power(2, (8-convert(tinyint, right(@to, 1)))))
    else 0 end
  where
   row = left(@to, 1)
 end
 else
 begin
  --Remove
  set @num = convert(tinyint, right(@from, 1))
  update check_table set
   player = player & ~convert(tinyint, power(2, (8-convert(tinyint, right(@from, 1))))),
   pking = case when @wasking = 1 then pking & ~convert(tinyint, power(2, (8-convert(tinyint, right(@from, 1)))))
    else 0 end
  where
   row = left(@from, 1)

  --Add
  update check_table set
   player = player | convert(tinyint, power(2, (8-convert(tinyint, right(@to, 1))))),
   pking = case when @wasking = 1 then pking | convert(tinyint, power(2, (8-convert(tinyint, right(@to, 1)))))
    else 0 end
  where
   row = left(@to, 1)
 end
 exec makeMoves 1
 exec makeMoves 2
end;

go
}

}

