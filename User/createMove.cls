Include %occInclude

/// Generated by TSQL CREATE PROC SQLUser.createMove
Class User.createMove [ Abstract, DdlAllowed, GeneratedBy = %XSQL.StatementBatch.cls, Owner = {UnknownUser} ]
{

ClassMethod createMove(from As %Library.String(MAXLEN=2), to As %Library.String(MAXLEN=2), player As %Library.Integer(MAXVAL=2147483647,MINVAL=-2147483648), jump As %Library.Boolean = 0) As %Library.Integer [ Language = tsql, SqlName = createMove, SqlProc ]
{

begin
 set nocount on
 set @from=ltrim(rtrim(@from))
 set @to=ltrim(rtrim(@to))
 --cache {w "create move from: "_from_" to: "_to,!}
 declare @sql varchar(8000), @name varchar(5)
 set @name = case when @player = 1 then 'c' else '' end + @from + @to
 if not exists(select 1 from sysobjects (nolock) where type = 'p' and name = @name)
 begin
  select @sql = 'create proc ' + @name +
  ' as ' + char(13) + char(10) +
  'set nocount on ' + char(13) + char(10) +
  case when @jump = 1 
   then 'exec Jump ' + convert(varchar(1), @player) + ', ''' + @from + ''', ''' + @to + ''' '
   else 'exec moveit ' + convert(varchar(1), @player) + ', ''' + @from + ''', ''' + @to + ''' '
  end +  char(13) + char(10) + 
  'exec checkWin ' + char(13) + char(10) +
  case when @player = 2 then 'exec compMove ' else ' ' end + char(13) + char(10) +
  'exec drawBoard'
  --cache {b}
  --exec(@sql)
  exec tsql.execddl @sql
 end
 insert into moves_table(moves, comp) values(@name, case when @player = 1 then 1 else 0 end)
end;

go
}

}

