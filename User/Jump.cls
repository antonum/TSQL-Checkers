Include %occInclude

/// Generated by TSQL CREATE PROC SQLUser.Jump
Class User.Jump [ Abstract, DdlAllowed, GeneratedBy = %XSQL.StatementBatch.cls, Owner = {UnknownUser} ]
{

ClassMethod Jump(who As %Library.Integer(MAXVAL=2147483647,MINVAL=-2147483648), cell As %Library.String(MAXLEN=2), next As %Library.String(MAXLEN=2)) As %Library.Integer [ Language = tsql, SqlName = Jump, SqlProc ]
{

begin
 set nocount on
 declare @row varchar(1), @oppcol tinyint, @num tinyint, @nextjump varchar(5), @sql varchar(200)

 set @oppcol = convert(tinyint, (convert(int, right(@cell, 1)) + convert(int, right(@next, 1)))/2)
 select @row = char((ascii(left(@cell, 1)) + ascii(left(@next, 1)))/2)
 
 if @who = 1
 begin
  update check_table set
   player = player & ~convert(tinyint, power(2, (8-@oppcol))),
   pking = pking & ~convert(tinyint, power(2, (8-@oppcol)))
  where row = @row
 end
 else
 begin
  update check_table set
   comp = comp & ~convert(tinyint, power(2, (8-@oppcol))),
   cking = cking & ~convert(tinyint, power(2, (8-@oppcol)))
  where row = @row
 end

 exec removemoves 1
 exec removemoves 2
 exec moveit @who, @cell, @next
 
 set @nextjump = SQLUser.canJump(@who, @next)
 if len(@nextjump)>0
 begin
  set @nextjump = case when tsql.modulo2(convert(int, 10*rand()))=0 then left(@nextjump, 2) else right(@nextjump, 2) end
  set @sql = 'exec Jump ' + convert(varchar(1), @who) + ', ''' + @next + ''', ''' + @nextjump + ''''
  exec(@sql)
 end
end;

go
}

}

